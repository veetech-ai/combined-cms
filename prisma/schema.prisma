datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enum for user roles
enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

// Enum for catalog status
enum CatalogStatus {
  ACTIVE
  INACTIVE
  ONLINE
  OFFLINE
}

enum ModuleStatus {
  DISABLED
  PENDING_APPROVAL
  APPROVED
}

enum SubscriptionPlan {
  BASIC
  PREMIUM
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  PENDING
  CANCELLED
}

enum PosIntegrationType {
  NONE
  SQUARE
  CLOVER
  STRIPE
  CUSTOM
}

model User {
  id             String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String     @unique @db.VarChar(255)
  password       String     @db.VarChar(255)
  phone          String?    @db.VarChar(255)
  address        String?    @db.VarChar(255)
  name           String     @db.VarChar(255)
  role           UserRole   @default(USER)
  status         UserStatus @default(ACTIVE)
  organizationId String?    @map("organization_id") @db.Uuid
  storeId        String?    @map("store_id") @db.Uuid
  createdAt      DateTime   @default(now()) @map("created_at")

  organization  Organization?  @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  store         Store?         @relation(fields: [storeId], references: [id], onDelete: SetNull)
  refreshTokens RefreshToken[]

  @@map("users")
}

model Organization {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String            @db.VarChar(255)
  email           String            @unique @db.VarChar(255)
  company         String            @db.VarChar(255)
  phone           String?           @db.VarChar(255)
  logo            String?           @db.VarChar(255)
  website         String?           @db.VarChar(255)
  
  // Billing Address
  billingStreet   String?           @map("billing_street") @db.VarChar(255)
  billingCity     String?           @map("billing_city") @db.VarChar(255)
  billingState    String?           @map("billing_state") @db.VarChar(255)
  billingZip      String?           @map("billing_zip") @db.VarChar(255)
  billingCountry  String?           @map("billing_country") @db.VarChar(255)
  
  // Primary Contact
  contactName     String?           @map("contact_name") @db.VarChar(255)
  contactEmail    String?           @map("contact_email") @db.VarChar(255)
  contactPhone    String?           @map("contact_phone") @db.VarChar(255)
  contactRole     String?           @map("contact_role") @db.VarChar(255)
  
  // Subscription
  subscriptionPlan      SubscriptionPlan    @default(BASIC) @map("subscription_plan")
  subscriptionStatus    SubscriptionStatus  @default(PENDING) @map("subscription_status")
  subscriptionStart     DateTime?           @map("subscription_start")
  subscriptionRenewal   DateTime?           @map("subscription_renewal")
  
  // POS Integration
  posType              PosIntegrationType   @default(NONE) @map("pos_type")
  posProvider          String?              @map("pos_provider") @db.VarChar(255)
  posConfig            Json?                @map("pos_config") @db.JsonB
  
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")

  stores         Store[]
  users          User[]

  @@map("organizations")
}

model Module {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  createdAt   DateTime      @default(now()) @map("created_at")
  StoreModule StoreModule[]

  @@map("modules")
}

model Store {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String?  @map("organization_id") @db.Uuid
  name           String   @db.VarChar(255)
  location       String?  @db.VarChar(255)
  createdAt      DateTime @default(now()) @map("created_at")

  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  users        User[]
  storeModules StoreModule[]

  @@map("stores")
}

model StoreModule {
  id       String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  storeId  String       @map("store_id") @db.Uuid
  moduleId String       @map("module_id") @db.Uuid
  status   ModuleStatus @default(DISABLED)

  store   Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  module  Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  Devices Devices[]

  @@map("store_modules")
}

model ScreenSpecs {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  size        String
  resolution  String?
  aspectRatio String?
  Devices     Devices[]
}

model Devices {
  id            String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  description   String?
  location      String?
  storeModuleId String  @map("store_module_id") @db.Uuid
  screenSpecsId String  @map("screen_specs_id") @db.Uuid

  storeModule StoreModule @relation(fields: [storeModuleId], references: [id], onDelete: Cascade)
  screenSpecs ScreenSpecs @relation(fields: [screenSpecsId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token     String   @unique @db.Text
  userId    String   @map("user_id") @db.Uuid
  expiresAt DateTime @map("expires_at") @db.Timestamptz
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}
